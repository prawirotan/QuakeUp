if(input$prediction_model == "NAIVEBAYES")
{
mydir = "2020eq-data/NaiveBayes/Hasil"
}
if(input$prediction_model == "MULTILOGREGRESSION")
{
mydir = "2020eq-data/MultiLogRegression/Hasil"
}
myfiles = list.files(path=mydir , pattern = "*.csv",full.names = TRUE)
myfiles = mixedsort(sort(myfiles))
days_input = (input$days_input) %% 365
print("PREDICTION DATE :")
dateToPredict = (as.Date(Sys.Date()) + days_input)
print(dateToPredict)
sumDate = (as.Date(dateToPredict) - as.Date("2020-01-01"))
dateInFile = as.vector(sumDate)
print("NOMOR FILE YG BAKAL DIAMBIL :")
print(dateInFile)
print("FILE YANG DIAMBIL :")
print(myfiles[dateInFile])
datacsv = ldply(myfiles[dateInFile], read_csv)
print(head(datacsv))
output$date_predicted_info <- renderUI({ f7BlockTitle(title= dateToPredict, size="medium") })
datacsv2 <- mutate(datacsv, CITY)
for(row in 1:nrow(datacsv2)) {
datacsv[row, "CITY"] = reverseGeoCodeCity(dataframe = datacsv2, row = row)
}
write.table(datacsv, file = myfiles[dateInFile],sep=",", row.names=FALSE,col.names=TRUE)
print(head(datacsv))
datacsv$DepthType <-  ifelse(datacsv$KEDALAMAN <= 70, "shallow",
ifelse(datacsv$KEDALAMAN <= 300 | datacsv$KEDALAMAN >70, "intermediate",
ifelse(datacsv$KEDALAMAN > 300, "deep", "other")))
pal <- colorNumeric(
palette = c('gold', 'orange', 'dark orange', 'orange red', 'red', 'dark red'),
domain = datacsv$MAG)
#define the color of for the depth of the earquakes
pal2 <- colorFactor(
palette = c('blue', 'yellow', 'red'),
domain = datacsv$DepthType
)
#create the map
observe({
proxy <- leafletProxy("mymap", data = datacsv)
proxy %>% clearHeatmap()
proxy %>% clearMarkers()
if (input$heat) {
proxy %>%  addHeatmap(lng=~LONGITUDE, lat=~LATITUDE, intensity = ~MAG, blur =  10, max = 0.05, radius = 15)
}
else{
proxy %>% clearHeatmap()
}
})
output$mymap <- renderLeaflet({
leaflet(datacsv, width="1000", height="1000") %>%
setView(lng =  113.9213257, lat = -0.789275, zoom = 4.5)  %>% #setting the view over ~ center of Indonesia
addTiles() %>%
addFullscreenControl() %>%
addCircles(data = datacsv, lat = ~ LATITUDE, lng = ~ LONGITUDE, weight = 1, radius = ~sqrt(MAG)*25000, popup = paste0("Wilayah: ", datacsv$CITY, "<br>", "Lintang: ", datacsv$LATITUDE, "<br>", "Bujur: ", datacsv$LONGITUDE, "<br>", "Kedalaman: ", datacsv$KEDALAMAN, "<br>", "Magnitudo: ", datacsv$MAG), label = ~as.character(paste0("Magnitude: ", sep = " ", MAG)), color = ~pal(MAG), fillOpacity = 0.5)
})
#create the text output
output$days_output <- renderText( {input$days_input} )
#next we use the observe function to make the checkboxes dynamic. If you leave this part out you will see that the checkboxes, when clicked on the first time, display our filters...But if you then uncheck them they stay on. So we need to tell the server to update the map when the checkboxes are unchecked.
observe({
proxy <- leafletProxy("mymap", data = datacsv)
proxy %>% clearMarkers()
if (input$markers) {
proxy %>% addCircleMarkers(stroke = FALSE, color = ~pal2(DepthType), fillOpacity = 0.2,      label = ~as.character(paste0("Magnitude: ", sep = " ", MAG))) %>%
addLegend("bottomright", pal = pal2, values = datacsv$DepthType,
title = "Depth Type",
opacity = 1)}
else {
proxy %>% clearMarkers() %>% clearControls()
}
})
output$pred_result_table_ui <- function() {
datacsv %>%
#mutate(car = rownames(.)) %>%
mutate(datacsv$MAG <- color_tile("white", "orange")(datacsv$MAG)) %>%
select(CITY,LATITUDE, LONGITUDE, Lat_Error, Long_Error, MAG, KEDALAMAN) %>%
#filter(mpg <= input$mpg) %>%
knitr::kable("html") %>%
kable_styling("striped", full_width = F) %>%   scroll_box(width = "100%", height = "700px")
}
})
################################################### END USER INPUT ###################################################################
######################################################################################################################################
}
)
#load libraries
library(shiny)
library(shinyMobile)
library(shinydashboard)
library(leaflet)
library(dplyr)
library(leaflet.extras)
library(shinyWidgets)
library(fixerapi)
library(ROpenWeatherMap)
library(revgeo)
library(httr)
library(gtools)
library(plyr)
library(readr)
library(caret)
library(xml2)
library(rvest)
library(jsonlite)
library(kableExtra)
library(formattable)
#library(taskscheduleR)
#myscript <- system.file("extdata", "D:/Documents/Coding/QuakeUp/app.R", package = "taskscheduleR")
#taskscheduler_create(taskname = "update_BMKG_12HRS", rscript = myscript,
#                   schedule = "HOURLY", starttime = "00:00", modifier = 12)
url <- 'https://www.bmkg.go.id/gempabumi/gempabumi-terkini.bmkg'
out_df <- url %>% read_html() %>% html_table() %>% .[[1]]
head(out_df)
write.csv(out_df, 'current_earthquake_data.csv', row.names = FALSE)
data <- read.csv('current_earthquake_data.csv')
Sys.setenv(FIXER_API_KEY='cf24b3b8a8588c80c7dfcac67bc35709')
mydata<-fixer_latest()
#EARTHQUAKE
data$DepthType <-  ifelse(data$Kedalaman <= paste(70, "Km"), "Shallow",
ifelse(data$Kedalaman <= 300 | out_df$KEDALAMAN > 70, "Intermediate",
ifelse(data$Kedalaman > 300, "Deep", "other")))
#CONVERT MONEY
GetExchangeRates <- function(from, to, dt=Sys.Date()) {
require(quantmod)
obj.names <- getFX(paste0(from, "/", to), from=dt, to=dt)
result <- numeric(length(obj.names))
names(result) <- obj.names
for (obj.name in obj.names) {
result[obj.name] <- as.numeric(get(obj.name))[1]
# Clean up
rm(obj.name)
}
return(result)
}
reverseGeoCodeCity <- function(dataframe, row) {
latitude = dataframe[row, "LATITUDE"]
longitude = dataframe[row, "LONGITUDE"]
JSONURL = "https://api.bigdatacloud.net/data/reverse-geocode?latitude="
JSONURL2 = "&longitude="
JSONURL3 = "&localityLanguage=en&key=d853aadb6fe04084938dd4b64d5c0e2a"
getCity = paste(JSONURL, latitude, JSONURL2, longitude, JSONURL3, sep ="", collapse="")
# cityName <- jsonlite::fromJSON(getCity, flatten=TRUE)
return(getCity)
# return(cityName$locality)
}
TestExchangeRates <- function() {
from <- c("CAD", "JPY", "USD")
to <- c("USD", "USD", "EUR")
GetExchangeRates(from, to)
}
#UI
shiny::shinyApp(
ui=f7Page(
title = "Quake Up",
f7Appbar(
f7Flex(f7Back(targetId = "tabset"),f7Next(targetId = "tabset"))
),
f7TabLayout( navbar = f7Navbar(
title = "Quake Up",
hairline = FALSE,
shadow = TRUE
),
f7Tabs(
animated=FALSE,
swipeable =FALSE,
id="tabs",
f7Tab(
tabName="Map Of Indonesia",
icon=f7Icon("world"),
active=TRUE,
f7Card(f7Row(uiOutput("map_type"))),
f7Card(expandable = TRUE, swipeToClose=TRUE,
f7Accordion(
inputId = "myaccordion1",
f7AccordionItem(
open=TRUE,
title = "SHOW MAP",
f7Block( ui <- fluidPage(
mainPanel(
#this will create a space for us to display our map
leafletOutput(outputId = "mymap", width="1820", height="860"),
#this allows me to put the checkmarks ontop of the map to allow people to view earthquake depth or overlay a heatmap
absolutePanel(bottom=50, left = 20, setBackgroundColor("white"), prettyCheckbox(
inputId = "markers", label = "Depth",animation = "pulse",
status = "success", outline = TRUE,  bigger = FALSE, inline=TRUE, thick = TRUE
),
prettyCheckbox(
inputId = "heat", label = "uHeatmap", animation = "pulse", thick= TRUE,
status = "success", outline = TRUE, inline=TRUE
)
)
), ),
open = TRUE
)
),
),f7Card( height="500",
f7Block( actionButton ("current_eq_act", "SHOW CURRENT EARTHQUAKE",class = "btn btn-info"))) ,f7Row(f7BlockTitle(title="PREDICT EARTHQUAKE", size="medium")),
f7Card(
title = "",
height="1000",
f7Row(f7Col(actionButton("slider_input_act", "SLIDER INPUT")), f7Col(actionButton("number_input_act", "INPUT BY NUMBERS"))),
f7Col(uiOutput("inputControls")),
f7Row(pickerInput(
inputId = "prediction_model",
label = "PREDICTION MODEL",
choices = paste( c("SVM", "NAIVEBAYES", "MULTILOGREGRESSION")),
multiple = FALSE,
selected = "SVM",
choicesOpt = list(
content = sprintf(
paste( c("SVM", "NAIVEBAYES", "MULTILOGREGRESSION")))))), actionButton("predict", "PREDICT", class = "btn btn-success", icon=)
), f7Block(uiOutput="date_predicted_info"), f7Card(title="", f7Row(uiOutput("table_title")),tableOutput("pred_result_table_ui"))
)),
f7Tab(
tabName = "Weather",
icon = f7Icon("cloud_upload"),
active = FALSE,
f7Shadow(
intensity = 10,
hover = TRUE,
f7Card(
title = "Card header",
footer = tagList(
f7Button(color = "blue", label = "My button", src = "https://www.google.com"),
f7Badge("Badge", color = "green")
)
)
)
),
f7Tab(
tabName = "Currency",
icon = f7Icon("money_dollar"),
active = FALSE,
f7Shadow(
intensity = 10,
hover = TRUE,
f7Card(
title = "Currency Converter",
ui <- fluidPage(
titlePanel("CURRENCY CONVERTER"), mainPanel(  pickerInput(
inputId = "caption",
label = "EUR -> ",
choices = paste( c("IDR", "USD", "SGD")),
multiple = FALSE,
selected = "IDR",
choicesOpt = list(
content = sprintf(
paste( c("IDR", "USD", "SGD"))))
), verbatimTextOutput("value"), pickerInput(
inputId = "convertTo",
label = "EUR -> ",
choices = paste( c("IDR", "USD", "EUR")),
multiple = FALSE,
selected = "IDR",
choicesOpt = list(
content = sprintf(
paste( c("IDR", "USD", "EUR"))))
), verbatimTextOutput("valueConvertTo"),numericInput("currencyNumber", "Currency Number", 10),
verbatimTextOutput("convert")), actionButton("convert", "CONVERT")
)
)
)
)
)
)),
#EARTHQUAKE DATA
server <- function(input, output, session) {
#define the color pallate for the magnitidue of the earthquake
pal <- colorNumeric(
palette = c('gold', 'orange', 'dark orange', 'orange red', 'red', 'dark red'),
domain = data$Magnitudo)
#define the color of for the depth of the earquakes
pal2 <- colorFactor(
palette = c('blue', 'yellow', 'red'),
domain = data$DepthType
)
#create the map
output$mymap <- renderLeaflet({
leaflet(data, width="1000", height="1000") %>%
setView(lng =  113.9213257, lat = -0.789275, zoom = 4.5)  %>% #setting the view over ~ center of Indonesia
addTiles() %>%
addFullscreenControl() %>%
addCircles(data = data, lat = ~ Lintang, lng = ~ Bujur, weight = 1, radius = ~sqrt(Magnitudo)*25000, popup = paste0("Wilayah: ", data$Wilayah, "<br>", "Lintang: ", data$Lintang, "<br>", "Bujur: ", data$Bujur, "<br>", "Kedalaman: ", data$Kedalaman, "<br>", "Waktu Gempa: ", data$Waktu.Gempa, "<br>", "Magnitudo: ", data$Magnitudo), label = ~as.character(paste0("Magnitude: ", sep = " ", Magnitudo)), color = ~pal(Magnitudo), fillOpacity = 0.5)
})
#create the text output
output$days_output <- renderText( {input$days_input} )
#next we use the observe function to make the checkboxes dynamic. If you leave this part out you will see that the checkboxes, when clicked on the first time, display our filters...But if you then uncheck them they stay on. So we need to tell the server to update the map when the checkboxes are unchecked.
#observe({
#  proxy <- leafletProxy("mymap", data = data)
#  proxy %>% clearMarkers()
#  if (input$markers) {
#    proxy %>% addCircleMarkers(stroke = FALSE, color = ~pal2(DepthType), fillOpacity = 0.2, label = ~as.character(paste0("Magnitude: ", sep = " ", Magnitudo))) %>%
#      addLegend("bottomright", pal = pal2, values = data$DepthType,
#                title = "Depth Type",
#                opacity = 1)}
#  else {
#    proxy %>% clearMarkers() %>% clearControls()
#  }
#   })
observe({
proxy <- leafletProxy("mymap", data = data)
proxy %>% clearMarkers()
if (input$heat) {
proxy %>%  addHeatmap(lng=~Bujur, lat=~Lintang, intensity = ~Magnitudo, blur =  10, max = 0.05, radius = 15)
}
else{
proxy %>% clearHeatmap()
}
})
observeEvent(input$convert, {
currencyName<-input$caption
rowNumberInputData <- which(grepl(currencyName, mydata$name))
currency <- mydata[rowNumberInputData, "value"]
# output$table <- DT::renderDataTable(DT::datatable({liveish_data()}))
output$value <- renderPrint({ mydata[which(mydata$name==input$caption),]})
output$convert<- renderPrint({ currency*input$currencyNumber })
})
output$map_type<- renderUI({ f7BlockTitle(title="Current Earthquke", size="medium") })
output$table_title <- renderUI({ f7BlockTitle(title="Current Earthquke", size="medium") })
output$pred_result_table_ui <- function() {
data %>%
#mutate(car = rownames(.)) %>%
mutate(data$MAG <- color_tile("white", "orange")(data$MAG)) %>%
select(everything()) %>%
#filter(mpg <= input$mpg) %>%
knitr::kable("html") %>%
kable_styling("striped", full_width = F) %>%   scroll_box(width = "100%", height = "700px")
}
observeEvent(input$current_eq_act, {
output$table_title <- renderUI({ f7BlockTitle(title="Current Earthquke", size="medium") })
output$map_type<- renderUI({ f7BlockTitle(title="Current Earthquke", size="medium") })
output$mymap <- renderLeaflet({
leaflet(data, width="1000", height="1000") %>%
setView(lng =  113.9213257, lat = -0.789275, zoom = 4.5)  %>% #setting the view over ~ center of Indonesia
addTiles() %>%
addFullscreenControl() %>%
addCircles(data = data, lat = ~ Lintang, lng = ~ Bujur, weight = 1, radius = ~sqrt(Magnitudo)*25000, popup = paste0("Wilayah: ", data$Wilayah, "<br>", "Lintang: ", data$Lintang, "<br>", "Bujur: ", data$Bujur, "<br>", "Kedalaman: ", data$Kedalaman, "<br>", "Waktu Gempa: ", data$Waktu.Gempa, "<br>", "Magnitudo: ", data$Magnitudo), label = ~as.character(paste0("Magnitude: ", sep = " ", Magnitudo)), color = ~pal(Magnitudo), fillOpacity = 0.5)
})
#next we use the observe function to make the checkboxes dynamic. If you leave this part out you will see that the checkboxes, when clicked on the first time, display our filters...But if you then uncheck them they stay on. So we need to tell the server to update the map when the checkboxes are unchecked.
observe({
proxy <- leafletProxy("mymap", data = data)
proxy %>% clearMarkers()
if (input$markers) {
proxy %>% addCircleMarkers(stroke = FALSE, color = ~pal2(DepthType), fillOpacity = 0.2, label = ~as.character(paste0("Magnitude: ", sep = " ", Magnitudo))) %>%
addLegend("bottomright", pal = pal2, values = data$DepthType,
title = "Depth Type",
opacity = 1)}
else {
proxy %>% clearMarkers() %>% clearControls()
}
})
observe({
proxy <- leafletProxy("mymap", data = data)
proxy %>% clearMarkers()
if (input$heat) {
proxy %>%  addHeatmap(lng=~Bujur, lat=~Lintang, intensity = ~Magnitudo, blur =  10, max = 0.05, radius = 15)
}
else{
proxy %>% clearHeatmap()
}
})
output$pred_result_table_ui <- function() {
data %>%
#mutate(car = rownames(.)) %>%
mutate(data$MAG <- color_tile("white", "orange")(data$MAG)) %>%
select(everything()) %>%
#filter(mpg <= input$mpg) %>%
knitr::kable("html") %>%
kable_styling("striped", full_width = F) %>%   scroll_box(width = "100%", height = "700px")
}})
output$inputControls <- renderUI({tagList(
f7BlockTitle(title = "INPUT DAYS TO PREDICT", size = "medium"), chooseSliderSkin("Flat"),
f7Slider(
inputId = "days_input",
label = "",
max = 101,
min = 1,
value = 1,
scale = TRUE,
)
)
})
########################### USER INPUT ###########################################
##################################################################################
observeEvent(input$number_input_act, {
output$inputControls <- renderUI({
tagList(
f7BlockTitle(title = "INPUT DAYS TO PREDICT", size = "medium"),
f7Stepper(
inputId = "days_input",
label = "",
min = 1,
max = 100,
value = 7,
color = "BLACK",
raised = TRUE,
fill = TRUE,
rounded = FALSE
),verbatimTextOutput(outputId = "days_output"))
})
})
observeEvent(input$slider_input_act, {
output$inputControls <- renderUI({tagList(
f7BlockTitle(title = "INPUT DAYS TO PREDICT", size = "medium"), chooseSliderSkin("Flat"),
f7Slider(
inputId = "days_input",
label = "",
max = 101,
min = 1,
value = 1,
scale = TRUE,
)
)
})
})
observeEvent(input$predict, {
output$map_type<- renderUI({ f7BlockTitle(title="Earthquake Prediction", size="medium") })
output$table_title <- renderUI({ f7BlockTitle(title="Earthquake Prediction", size="medium") })
if(input$prediction_model == "SVM"){
mydir = "2020eq-data/SVM/Hasil"
}
if(input$prediction_model == "NAIVEBAYES")
{
mydir = "2020eq-data/NaiveBayes/Hasil"
}
if(input$prediction_model == "MULTILOGREGRESSION")
{
mydir = "2020eq-data/MultiLogRegression/Hasil"
}
myfiles = list.files(path=mydir , pattern = "*.csv",full.names = TRUE)
myfiles = mixedsort(sort(myfiles))
days_input = (input$days_input) %% 365
print("PREDICTION DATE :")
dateToPredict = (as.Date(Sys.Date()) + days_input)
print(dateToPredict)
sumDate = (as.Date(dateToPredict) - as.Date("2020-01-01"))
dateInFile = as.vector(sumDate)
print("NOMOR FILE YG BAKAL DIAMBIL :")
print(dateInFile)
print("FILE YANG DIAMBIL :")
print(myfiles[dateInFile])
datacsv = ldply(myfiles[dateInFile], read_csv)
print(head(datacsv))
output$date_predicted_info <- renderUI({ f7BlockTitle(title= dateToPredict, size="medium") })
datacsv2 <- mutate(datacsv, CITY)
for(row in 1:nrow(datacsv2)) {
datacsv[row, "CITY"] = reverseGeoCodeCity(dataframe = datacsv2, row = row)
}
write.table(datacsv, file = myfiles[dateInFile],sep=",", row.names=FALSE,col.names=TRUE)
print(head(datacsv))
datacsv$DepthType <-  ifelse(datacsv$KEDALAMAN <= 70, "shallow",
ifelse(datacsv$KEDALAMAN <= 300 | datacsv$KEDALAMAN >70, "intermediate",
ifelse(datacsv$KEDALAMAN > 300, "deep", "other")))
pal <- colorNumeric(
palette = c('gold', 'orange', 'dark orange', 'orange red', 'red', 'dark red'),
domain = datacsv$MAG)
#define the color of for the depth of the earquakes
pal2 <- colorFactor(
palette = c('blue', 'yellow', 'red'),
domain = datacsv$DepthType
)
#create the map
observe({
proxy <- leafletProxy("mymap", data = datacsv)
proxy %>% clearHeatmap()
proxy %>% clearMarkers()
if (input$heat) {
proxy %>%  addHeatmap(lng=~LONGITUDE, lat=~LATITUDE, intensity = ~MAG, blur =  10, max = 0.05, radius = 15)
}
else{
proxy %>% clearHeatmap()
}
})
output$mymap <- renderLeaflet({
leaflet(datacsv, width="1000", height="1000") %>%
setView(lng =  113.9213257, lat = -0.789275, zoom = 4.5)  %>% #setting the view over ~ center of Indonesia
addTiles() %>%
addFullscreenControl() %>%
addCircles(data = datacsv, lat = ~ LATITUDE, lng = ~ LONGITUDE, weight = 1, radius = ~sqrt(MAG)*25000, popup = paste0("Wilayah: ", datacsv$CITY, "<br>", "Lintang: ", datacsv$LATITUDE, "<br>", "Bujur: ", datacsv$LONGITUDE, "<br>", "Kedalaman: ", datacsv$KEDALAMAN, "<br>", "Magnitudo: ", datacsv$MAG), label = ~as.character(paste0("Magnitude: ", sep = " ", MAG)), color = ~pal(MAG), fillOpacity = 0.5)
})
#create the text output
output$days_output <- renderText( {input$days_input} )
#next we use the observe function to make the checkboxes dynamic. If you leave this part out you will see that the checkboxes, when clicked on the first time, display our filters...But if you then uncheck them they stay on. So we need to tell the server to update the map when the checkboxes are unchecked.
observe({
proxy <- leafletProxy("mymap", data = datacsv)
proxy %>% clearMarkers()
if (input$markers) {
proxy %>% addCircleMarkers(stroke = FALSE, color = ~pal2(DepthType), fillOpacity = 0.2,      label = ~as.character(paste0("Magnitude: ", sep = " ", MAG))) %>%
addLegend("bottomright", pal = pal2, values = datacsv$DepthType,
title = "Depth Type",
opacity = 1)}
else {
proxy %>% clearMarkers() %>% clearControls()
}
})
output$pred_result_table_ui <- function() {
datacsv %>%
#mutate(car = rownames(.)) %>%
mutate(datacsv$MAG <- color_tile("white", "orange")(datacsv$MAG)) %>%
select(CITY,LATITUDE, LONGITUDE, Lat_Error, Long_Error, MAG, KEDALAMAN) %>%
#filter(mpg <= input$mpg) %>%
knitr::kable("html") %>%
kable_styling("striped", full_width = F) %>%   scroll_box(width = "100%", height = "700px")
}
})
################################################### END USER INPUT ###################################################################
######################################################################################################################################
}
)
